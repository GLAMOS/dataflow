'''
Created on 18.05.2018

@author: yvo
'''

import datetime
from ..FileDataReader import AsciiFileDateReader
from DataObjects.Glacier import Glacier

class VawFileReader(AsciiFileDateReader):
    '''
    Super class for all file types generated by VAW. The file type is mainly used by Andreas Bauder
    for length change data and observations. The file contains a specific header information
    containing the pkVaw of a glacier and a glacier name.
    '''
    
    def __init__(self, fullFileName):
        '''
        Constructor of the class.
        
        @type fullFileName: string
        @param fullFileName: Absolute path of the file.
        '''
        
        super().__init__(fullFileName)
        
        self.parseHeader()

    def parseHeader(self):
        '''
        Parsing the header information of the text file. The header information
        has to include the pkVaw and the name of the glacier.
        
        During parsing the header, the protected glacier member will be created.
        '''
        
        with open(self._fullFileName, "r") as vaw:
            
            lineCounter = 0
            
            for line in vaw:
        
                lineCounter += 1
                
                try:
                        
                    if lineCounter == 1:
                            
                        metadata = self._getMetadata(line)
                        
                        self._glacier = Glacier(None, metadata[1], metadata[0])
                        
                        print(self._glacier)
                
                #TODO: Implementing own exceptions.
                except Exception as e:

                    errorMessage = "{0} @ {1}: {2}".format(vaw, lineCounter, e)
                    print(errorMessage)
        
        
    def _reformateDate(self, dateVaw):
        '''
        Helper function to reformat the VAW format of the date. A VAW format will have
        values as 00.00.2018 identifying a not known date of the year 2018.
        Such kind of values are translated into 01.09. of the corresponding year.
        
        @type dateVaw: string
        @param dateVaw: String-representation of the date as string in the format dd.mm.yyyy
        
        @rtype: Array [DateTime, integer]
        @return: Array with a correct date object and the quality of the date (e.g. 1 = known, 11 = estimated).
        '''
    
        dateVawParts = dateVaw.split(".")
    
        day   = None
        month = None
        year  = None
    
        quality = None
    
        if dateVawParts[0] == "00" or dateVawParts[1] == "00":
            quality = 11
        else:
            quality = 1
    
        if dateVawParts[0] == "00":
            day = 1
        else:
            day = int(dateVawParts[0])
        if dateVawParts[1] == "00":
            month = 9
        else:
            month = int(dateVawParts[1])
    
        year = int(dateVawParts[2])
    
        return [datetime.date(year, month, day), quality]
    
    def _getMetadata(self, metadataLine):
        '''
        Helper function to retrieve the key values of the header (e.g. pkVaw, name).
        
        @type metadataLine: string
        @param metadataLine: Entire line of the header.
        
        @rtype: Array [string, integer]
        @return: Array with name and pkVAW.
        '''
    
        lineParts = metadataLine.split(";")
    
        metadata = [lineParts[1].strip(), int(lineParts[2].strip())]
    
        return metadata